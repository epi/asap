// cpu6502.ci - 6502 CPU emulator
//
// Copyright (C) 2010-2023  Piotr Fusik
//
// This file is part of ASAP (Another Slight Atari Player),
// see http://asap.sourceforge.net
//
// ASAP is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published
// by the Free Software Foundation; either version 2 of the License,
// or (at your option) any later version.
//
// ASAP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with ASAP; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

// How 6502 registers are stored in this emulator:
// All variables are int, because modern processors (and Java bytecode)
// tend to operate more effectively on these type than narrower ones.
// Pc is really an unsigned 16-bit integer.
// A, X, Y and S are unsigned 8-bit integers.
// Flags are decomposed into three variables for improved performance.
// C is either 0 or 1.
// Nz contains 6502 flags N and Z.
// N is set if (Nz >= 0x80). Z is set if ((Nz & 0xff) == 0).
// Usually nz is simply assigned the unsigned 8-bit operation result.
// There are just a few operations (BIT, PLP and RTI) where both N and Z may
// be set. In these cases, N is reflected by the 8th (not 7th) bit of Nz.
// Vdi contains rarely used flags V, D and I, as a combination
// of VFlag, DFlag and IFlag. Other Vdi bits are clear.

// "Unofficial" opcodes are those not documented as "legal" 6502 opcodes.
// Their operation has been reverse-engineered on Atari 800XL and Atari 65XE.
// Unofficial opcodes are identical to C64's 6510, except for 0x8b and 0xab.
// The operation of "unstable" opcodes is partially uncertain.
// Explanation is welcome.

// Emulation of POKEY timer interrupts is included.

class Cpu6502
{
	internal ASAP!? Asap;
	internal byte[65536] Memory;
	internal int Cycle;

	internal int Pc;
	internal int A;
	internal int X;
	internal int Y;
	internal int S;
	int Nz;
	int C;
	int Vdi;

	const int VFlag = 0x40;
	const int DFlag = 0x08;
	const int IFlag = 0x04;
	const int ZFlag = 0x02;

	internal void Reset!()
	{
		Cycle = 0;
		Nz = 0;
		C = 0;
		Vdi = 0;
	}

	int Peek(int addr)
	{
		if ((addr & 0xf900) == 0xd000)
			return Asap.PeekHardware(addr);
		else
			return Memory[addr];
	}

	void Poke!(int addr, int data)
	{
		if ((addr & 0xf900) == 0xd000)
			Asap.PokeHardware(addr, data);
		else
			Memory[addr] = data;
	}

	int PeekReadModifyWrite!(int addr)
	{
		if (addr >> 8 == 0xd2) {
			Cycle--;
			int data = Asap.PeekHardware(addr);
			Asap.PokeHardware(addr, data);
			Cycle++;
			return data;
		}
		return Memory[addr];
	}

	int Pull!()
	{
		int s = (S + 1) & 0xff;
		S = s;
		return Memory[0x0100 + s];
	}

	void PullFlags!()
	{
		int data = Pull();
		Nz = ((data & 0x80) << 1) + (~data & ZFlag);
		C = data & 1;
		Vdi = data & (VFlag | DFlag | IFlag);
	}

	void Push!(int data)
	{
		int s = S;
		Memory[0x0100 + s] = data;
		S = (s - 1) & 0xff;
	}

	internal void PushPc!()
	{
		Push(Pc >> 8);
		Push(Pc & 0xff);
	}

	void PushFlags!(int b)
	{
		int nz = Nz;
		b += ((nz | nz >> 1) & 0x80) + Vdi + C;
		if ((nz & 0xff) == 0)
			b += ZFlag;
		Push(b);
	}

	void AddWithCarry!(int data)
	{
		int a = A;
		int vdi = Vdi;
		int tmp = a + data + C;
		Nz = tmp & 0xff;
		if ((vdi & DFlag) == 0) {
			// binary mode
			Vdi = (vdi & (DFlag | IFlag)) + (((~(data ^ a) & (a ^ tmp)) >> 1) & VFlag);
			C = tmp >> 8;
			A = Nz;
		}
		else {
			// decimal mode
			int al = (a & 0x0f) + (data & 0x0f) + C;
			if (al >= 10) {
				tmp += al < 26 ? 6 : -10;
				// Set N from tmp, leave Z unchanged. Zero can only change to 6, this doesn't affect N.
				if (Nz != 0)
					Nz = (tmp & 0x80) + 1;
			}
			Vdi = (vdi & (DFlag | IFlag)) + (((~(data ^ a) & (a ^ tmp)) >> 1) & VFlag);
			if (tmp >= 0xa0) {
				C = 1;
				A = (tmp - 0xa0) & 0xff;
			}
			else {
				C = 0;
				A = tmp;
			}
		}
	}

	void SubtractWithCarry!(int data)
	{
		int a = A;
		int vdi = Vdi;
		int borrow = C - 1;
		int tmp = a - data + borrow;
		int al = (a & 0x0f) - (data & 0x0f) + borrow;
		Vdi = (vdi & (DFlag | IFlag)) + ((((data ^ a) & (a ^ tmp)) >> 1) & VFlag);
		C = tmp >= 0 ? 1 : 0;
		Nz = A = tmp & 0xff;
		if ((vdi & DFlag) != 0) {
			// decimal mode
			if (al < 0)
				A += al < -10 ? 10 : -6;
			if (C == 0)
				A = (A - 0x60) & 0xff;
		}
	}

	int ArithmeticShiftLeft!(int addr)
	{
		int data = PeekReadModifyWrite(addr);
		C = data >> 7;
		data = (data << 1) & 0xff;
		Poke(addr, data);
		return data;
	}

	int RotateLeft!(int addr)
	{
		int data = (PeekReadModifyWrite(addr) << 1) + C;
		C = data >> 8;
		data &= 0xff;
		Poke(addr, data);
		return data;
	}

	int LogicalShiftRight!(int addr)
	{
		int data = PeekReadModifyWrite(addr);
		C = data & 1;
		data >>= 1;
		Poke(addr, data);
		return data;
	}

	int RotateRight!(int addr)
	{
		int data = (C << 8) + PeekReadModifyWrite(addr);
		C = data & 1;
		data >>= 1;
		Poke(addr, data);
		return data;
	}

	int Decrement!(int addr)
	{
		int data = PeekReadModifyWrite(addr) - 1 & 0xff;
		Poke(addr, data);
		return data;
	}

	int Increment!(int addr)
	{
		int data = PeekReadModifyWrite(addr) + 1 & 0xff;
		Poke(addr, data);
		return data;
	}

	void ExecuteIrq!(int b)
	{
		PushPc();
		PushFlags(b);
		Vdi |= IFlag;
		Pc = Memory[0xfffe] + (Memory[0xffff] << 8);
	}

	void CheckIrq!()
	{
		if ((Vdi & IFlag) == 0 && Asap.IsIrq()) {
			Cycle += 7;
			ExecuteIrq(0x20); // B flag clear
		}
	}

	void Shx!(int addr, int data)
	{
		addr += Memory[Pc++];
		int hi = Memory[Pc++];
		data &= hi + 1;
		if (addr >= 0x100)
			hi = data - 1;
		addr += hi << 8;
		Poke(addr, data);
	}

	/// Runs 6502 emulation for the specified number of Atari scanlines.
	/// Each scanline is 114 cycles of which 9 is taken by ANTIC for memory refresh.
	internal void DoFrame!(int cycleLimit)
	{
		while (Cycle < cycleLimit) {

			if (Cycle >= Asap.NextEventCycle) {
				Asap.HandleEvent();
				CheckIrq();
			}
#if ASAPSCAN
			native {
				if (cpu_trace != 0)
					trace_cpu();
			}
#endif
			int data = Memory[Pc++];
			const byte[256] opcodeCycles = {
			//	0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
				7, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 4, 4, 6, 6, // 0x
				2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, // 1x
				6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 4, 4, 6, 6, // 2x
				2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, // 3x
				6, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 3, 4, 6, 6, // 4x
				2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, // 5x
				6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 5, 4, 6, 6, // 6x
				2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, // 7x
				2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, // 8x
				2, 6, 2, 6, 4, 4, 4, 4, 2, 5, 2, 5, 5, 5, 5, 5, // 9x
				2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, // Ax
				2, 5, 2, 5, 4, 4, 4, 4, 2, 4, 2, 4, 4, 4, 4, 4, // Bx
				2, 6, 2, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6, // Cx
				2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, // Dx
				2, 6, 2, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6, // Ex
				2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7  // Fx
			};
			Cycle += opcodeCycles[data];
			int addr = 0; // This initialization is only to avoid false "uninitialized value used" warnings and errors.

			// First dispatch on opcode.
			// Handles execution of instructions with fixed addressing modes (code ends with `continue`)
			// and computes effective address for instructions with variable addressing mode
			// (code ends with `break" to pass to the second `switch`).
			switch (data) {
			case 0x00: // BRK
				Pc++;
				ExecuteIrq(0x30); // B flag set
				continue;
			case 0x01: // ORA (ab,x)
			case 0x03: // ASO (ab,x) [unofficial]
			case 0x21: // AND (ab,x)
			case 0x23: // RLA (ab,x) [unofficial]
			case 0x41: // EOR (ab,x)
			case 0x43: // LSE (ab,x) [unofficial]
			case 0x61: // ADC (ab,x)
			case 0x63: // RRA (ab,x) [unofficial]
			case 0x81: // STA (ab,x)
			case 0x83: // SAX (ab,x) [unofficial]
			case 0xa1: // LDA (ab,x)
			case 0xa3: // LAX (ab,x) [unofficial]
			case 0xc1: // CMP (ab,x)
			case 0xc3: // DCM (ab,x) [unofficial]
			case 0xe1: // SBC (ab,x)
			case 0xe3: // INS (ab,x) [unofficial]
				addr = (Memory[Pc++] + X) & 0xff;
				addr = Memory[addr] + (Memory[addr + 1 & 0xff] << 8);
				break;
			case 0x02: // CIM [unofficial]
			case 0x12:
			case 0x22:
			case 0x32:
			case 0x42:
			case 0x52:
			case 0x62:
			case 0x72:
			case 0x92:
			case 0xb2:
			case 0xd2:
			case 0xf2:
				Pc--;
				Cycle = Asap.NextEventCycle;
				continue;
			case 0x04: // NOP ab [unofficial]
			case 0x44:
			case 0x64:
			case 0x14: // NOP ab,x [unofficial]
			case 0x34:
			case 0x54:
			case 0x74:
			case 0xd4:
			case 0xf4:
			case 0x80: // NOP #ab [unofficial]
			case 0x82:
			case 0x89:
			case 0xc2:
			case 0xe2:
				Pc++;
				continue;
			case 0x05: // ORA ab
			case 0x06: // ASL ab
			case 0x07: // ASO ab [unofficial]
			case 0x24: // BIT ab
			case 0x25: // AND ab
			case 0x26: // ROL ab
			case 0x27: // RLA ab [unofficial]
			case 0x45: // EOR ab
			case 0x46: // LSR ab
			case 0x47: // LSE ab [unofficial]
			case 0x65: // ADC ab
			case 0x66: // ROR ab
			case 0x67: // RRA ab [unofficial]
			case 0x84: // STY ab
			case 0x85: // STA ab
			case 0x86: // STX ab
			case 0x87: // SAX ab [unofficial]
			case 0xa4: // LDY ab
			case 0xa5: // LDA ab
			case 0xa6: // LDX ab
			case 0xa7: // LAX ab [unofficial]
			case 0xc4: // CPY ab
			case 0xc5: // CMP ab
			case 0xc6: // DEC ab
			case 0xc7: // DCM ab [unofficial]
			case 0xe4: // CPX ab
			case 0xe5: // SBC ab
			case 0xe6: // INC ab
			case 0xe7: // INS ab [unofficial]
				addr = Memory[Pc++];
				break;
			case 0x08: // PHP
				PushFlags(0x30); // B flag set
				continue;
			case 0x09: // ORA #ab
			case 0x29: // AND #ab
			case 0x49: // EOR #ab
			case 0x69: // ADC #ab
			case 0xa0: // LDY #ab
			case 0xa2: // LDX #ab
			case 0xa9: // LDA #ab
			case 0xc0: // CPY #ab
			case 0xc9: // CMP #ab
			case 0xe0: // CPX #ab
			case 0xe9: // SBC #ab
			case 0xeb: // SBC #ab [unofficial]
				addr = Pc++;
				break;
			case 0x0a: // ASL
				C = A >> 7;
				Nz = A = (A << 1) & 0xff;
				continue;
			case 0x0b: // ANC #ab [unofficial]
			case 0x2b:
				Nz = A &= Memory[Pc++];
				C = Nz >> 7;
				continue;
			case 0x0c: // NOP abcd [unofficial]
				Pc += 2;
				continue;
			case 0x0d: // ORA abcd
			case 0x0e: // ASL abcd
			case 0x0f: // ASO abcd [unofficial]
			case 0x2c: // BIT abcd
			case 0x2d: // AND abcd
			case 0x2e: // ROL abcd
			case 0x2f: // RLA abcd [unofficial]
			case 0x4d: // EOR abcd
			case 0x4e: // LSR abcd
			case 0x4f: // LSE abcd [unofficial]
			case 0x6c: // JMP (abcd)
			case 0x6d: // ADC abcd
			case 0x6e: // ROR abcd
			case 0x6f: // RRA abcd [unofficial]
			case 0x8c: // STY abcd
			case 0x8d: // STA abcd
			case 0x8e: // STX abcd
			case 0x8f: // SAX abcd [unofficial]
			case 0xac: // LDY abcd
			case 0xad: // LDA abcd
			case 0xae: // LDX abcd
			case 0xaf: // LAX abcd [unofficial]
			case 0xcc: // CPY abcd
			case 0xcd: // CMP abcd
			case 0xce: // DEC abcd
			case 0xcf: // DCM abcd [unofficial]
			case 0xec: // CPX abcd
			case 0xed: // SBC abcd
			case 0xee: // INC abcd
			case 0xef: // INS abcd [unofficial]
				addr = Memory[Pc++];
				addr += Memory[Pc++] << 8;
				break;
			case 0x10: // BPL
				if (Nz < 0x80)
					break;
				Pc++;
				continue;
			case 0x11: // ORA (ab),y
			case 0x31: // AND (ab),y
			case 0x51: // EOR (ab),y
			case 0x71: // ADC (ab),y
			case 0xb1: // LDA (ab),y
			case 0xb3: // LAX (ab),y [unofficial]
			case 0xd1: // CMP (ab),y
			case 0xf1: // SBC (ab),y
				int zp = Memory[Pc++];
				addr = Memory[zp] + Y;
				if (addr >= 0x100)
					Cycle++;
				addr = (addr + (Memory[zp + 1 & 0xff] << 8)) & 0xffff;
				break;
			case 0x13: // ASO (ab),y [unofficial]
			case 0x33: // RLA (ab),y [unofficial]
			case 0x53: // LSE (ab),y [unofficial]
			case 0x73: // RRA (ab),y [unofficial]
			case 0x91: // STA (ab),y
			case 0xd3: // DCM (ab),y [unofficial]
			case 0xf3: // INS (ab),y [unofficial]
				addr = Memory[Pc++];
				addr = (Memory[addr] + (Memory[addr + 1 & 0xff] << 8) + Y) & 0xffff;
				break;
			case 0x15: // ORA ab,x
			case 0x16: // ASL ab,x
			case 0x17: // ASO ab,x [unofficial]
			case 0x35: // AND ab,x
			case 0x36: // ROL ab,x
			case 0x37: // RLA ab,x [unofficial]
			case 0x55: // EOR ab,x
			case 0x56: // LSR ab,x
			case 0x57: // LSE ab,x [unofficial]
			case 0x75: // ADC ab,x
			case 0x76: // ROR ab,x
			case 0x77: // RRA ab,x [unofficial]
			case 0x94: // STY ab,x
			case 0x95: // STA ab,x
			case 0xb4: // LDY ab,x
			case 0xb5: // LDA ab,x
			case 0xd5: // CMP ab,x
			case 0xd6: // DEC ab,x
			case 0xd7: // DCM ab,x [unofficial]
			case 0xf5: // SBC ab,x
			case 0xf6: // INC ab,x
			case 0xf7: // INS ab,x [unofficial]
				addr = (Memory[Pc++] + X) & 0xff;
				break;
			case 0x18: // CLC
				C = 0;
				continue;
			case 0x19: // ORA abcd,y
			case 0x39: // AND abcd,y
			case 0x59: // EOR abcd,y
			case 0x79: // ADC abcd,y
			case 0xb9: // LDA abcd,y
			case 0xbb: // LAS abcd,y [unofficial, unstable]
			case 0xbe: // LDX abcd,y
			case 0xbf: // LAX abcd,y [unofficial]
			case 0xd9: // CMP abcd,y
			case 0xf9: // SBC abcd,y
				addr = Memory[Pc++] + Y;
				if (addr >= 0x100)
					Cycle++;
				addr = (addr + (Memory[Pc++] << 8)) & 0xffff;
				break;
			case 0x1b: // ASO abcd,y [unofficial]
			case 0x3b: // RLA abcd,y [unofficial]
			case 0x5b: // LSE abcd,y [unofficial]
			case 0x7b: // RRA abcd,y [unofficial]
			case 0x99: // STA abcd,y
			case 0xdb: // DCM abcd,y [unofficial]
			case 0xfb: // INS abcd,y [unofficial]
				addr = Memory[Pc++] + Y;
				addr = (addr + (Memory[Pc++] << 8)) & 0xffff;
				break;
			case 0x1c: // NOP abcd,x [unofficial]
			case 0x3c:
			case 0x5c:
			case 0x7c:
			case 0xdc:
			case 0xfc:
				if (Memory[Pc] + X >= 0x100)
					Cycle++;
				Pc += 2;
				continue;
			case 0x1d: // ORA abcd,x
			case 0x3d: // AND abcd,x
			case 0x5d: // EOR abcd,x
			case 0x7d: // ADC abcd,x
			case 0xbc: // LDY abcd,x
			case 0xbd: // LDA abcd,x
			case 0xdd: // CMP abcd,x
			case 0xfd: // SBC abcd,x
				addr = Memory[Pc++] + X;
				if (addr >= 0x100)
					Cycle++;
				addr = (addr + (Memory[Pc++] << 8)) & 0xffff;
				break;
			case 0x1e: // ASL abcd,x
			case 0x1f: // ASO abcd,x [unofficial]
			case 0x3e: // ROL abcd,x
			case 0x3f: // RLA abcd,x [unofficial]
			case 0x5e: // LSR abcd,x
			case 0x5f: // LSE abcd,x [unofficial]
			case 0x7e: // ROR abcd,x
			case 0x7f: // RRA abcd,x [unofficial]
			case 0x9d: // STA abcd,x
			case 0xde: // DEC abcd,x
			case 0xdf: // DCM abcd,x [unofficial]
			case 0xfe: // INC abcd,x
			case 0xff: // INS abcd,x [unofficial]
				addr = Memory[Pc++] + X;
				addr = (addr + (Memory[Pc++] << 8)) & 0xffff;
				break;
			case 0x20: // JSR abcd
				addr = Memory[Pc++];
				PushPc();
				Pc = addr + (Memory[Pc] << 8);
				continue;
			case 0x28: // PLP
				PullFlags();
				CheckIrq();
				continue;
			case 0x2a: // ROL
				A = (A << 1) + C;
				C = A >> 8;
				Nz = A &= 0xff;
				continue;
			case 0x30: // BMI
				if (Nz >= 0x80)
					break;
				Pc++;
				continue;
			case 0x38: // SEC
				C = 1;
				continue;
			case 0x40: // RTI
				PullFlags();
				Pc = Pull();
				Pc += Pull() << 8;
				CheckIrq();
				continue;
			case 0x48: // PHA
				Push(A);
				continue;
			case 0x4a: // LSR
				C = A & 1;
				Nz = A >>= 1;
				continue;
			case 0x4b: // ALR #ab [unofficial]
				A &= Memory[Pc++];
				C = A & 1;
				Nz = A >>= 1;
				continue;
			case 0x4c: // JMP abcd
				addr = Memory[Pc++];
				Pc = addr + (Memory[Pc] << 8);
				continue;
			case 0x50: // BVC
				if ((Vdi & VFlag) == 0)
					break;
				Pc++;
				continue;
			case 0x58: // CLI
				Vdi &= VFlag | DFlag;
				CheckIrq();
				continue;
			case 0x60: // RTS
				Pc = Pull();
				Pc += (Pull() << 8) + 1;
				continue;
			case 0x68: // PLA
				Nz = A = Pull();
				continue;
			case 0x6a: // ROR
				Nz = (C << 7) + (A >> 1);
				C = A & 1;
				A = Nz;
				continue;
			case 0x6b: // ARR #ab [unofficial]
				data = A & Memory[Pc++];
				Nz = A = (data >> 1) + (C << 7);
				Vdi = (Vdi & (DFlag | IFlag)) + ((A ^ data) & VFlag);
				if ((Vdi & DFlag) == 0)
					C = data >> 7;
				else {
					if ((data & 0xf) >= 5)
						A = (A & 0xf0) + ((A + 6) & 0xf);
					if (data >= 0x50) {
						A = (A + 0x60) & 0xff;
						C = 1;
					}
					else
						C = 0;
				}
				continue;
			case 0x70: // BVS
				if ((Vdi & VFlag) != 0)
					break;
				Pc++;
				continue;
			case 0x78: // SEI
				Vdi |= IFlag;
				continue;
			case 0x88: // DEY
				Nz = Y = (Y - 1) & 0xff;
				continue;
			case 0x8a: // TXA
				Nz = A = X;
				continue;
			case 0x8b: // ANE #ab [unofficial]
				data = Memory[Pc++];
				A &= (data | 0xef) & X;
				Nz = A & data;
				continue;
			case 0x90: // BCC
				if (C == 0)
					break;
				Pc++;
				continue;
			case 0x93: // SHA (ab),y [unofficial, unstable]
				{
					addr = Memory[Pc++];
					int hi = Memory[addr + 1 & 0xff];
					addr = Memory[addr];
					data = (hi + 1) & A & X;
					addr += Y;
					if (addr >= 0x100)
						hi = data - 1;
					addr += hi << 8;
					Poke(addr, data);
				}
				continue;
			case 0x96: // STX ab,y
			case 0x97: // SAX ab,y [unofficial]
			case 0xb6: // LDX ab,y
			case 0xb7: // LAX ab,y [unofficial]
				addr = (Memory[Pc++] + Y) & 0xff;
				break;
			case 0x98: // TYA
				Nz = A = Y;
				continue;
			case 0x9a: // TXS
				S = X;
				continue;
			case 0x9b: // SHS abcd,y [unofficial, unstable]
				// S seems to be stable, only memory values vary
				S = A & X;
				Shx(Y, S);
				continue;
			case 0x9c: // SHY abcd,x [unofficial]
				Shx(X, Y);
				continue;
			case 0x9e: // SHX abcd,y [unofficial]
				Shx(Y, X);
				continue;
			case 0x9f: // SHA abcd,y [unofficial, unstable]
				Shx(Y, A & X);
				continue;
			case 0xa8: // TAY
				Nz = Y = A;
				continue;
			case 0xaa: // TAX
				Nz = X = A;
				continue;
			case 0xab: // ANX #ab [unofficial]
				Nz = X = A &= Memory[Pc++];
				continue;
			case 0xb0: // BCS
				if (C != 0)
					break;
				Pc++;
				continue;
			case 0xb8: // CLV
				Vdi &= DFlag | IFlag;
				continue;
			case 0xba: // TSX
				Nz = X = S;
				continue;
			case 0xc8: // INY
				Nz = Y = (Y + 1) & 0xff;
				continue;
			case 0xca: // DEX
				Nz = X = (X - 1) & 0xff;
				continue;
			case 0xcb: // SBX #ab [unofficial]
				Nz = Memory[Pc++];
				X &= A;
				C = X >= Nz ? 1 : 0;
				Nz = X = (X - Nz) & 0xff;
				continue;
			case 0xd0: // BNE
				if ((Nz & 0xff) != 0)
					break;
				Pc++;
				continue;
			case 0xd8: // CLD
				Vdi &= VFlag | IFlag;
				continue;
			case 0xe8: // INX
				Nz = X = (X + 1) & 0xff;
				continue;
			case 0xea: // NOP
			case 0x1a: // NOP [unofficial]
			case 0x3a:
			case 0x5a:
			case 0x7a:
			case 0xda:
			case 0xfa:
				continue;
			case 0xf0: // BEQ
				if ((Nz & 0xff) == 0)
					break;
				Pc++;
				continue;
			case 0xf8: // SED
				Vdi |= DFlag;
				continue;
			default:
				assert false;
			}

			// Second dispatch on opcode.
			// Handles execution of instructions with variable addressing mode.
			// The address has been decoded to `addr`.
			switch (data) {
			case 0x01: // ORA (ab,x)
			case 0x05: // ORA ab
			case 0x09: // ORA #ab
			case 0x0d: // ORA abcd
			case 0x11: // ORA (ab),y
			case 0x15: // ORA ab,x
			case 0x19: // ORA abcd,y
			case 0x1d: // ORA abcd,x
				Nz = A |= Peek(addr);
				break;
			case 0x03: // ASO (ab,x) [unofficial]
			case 0x07: // ASO ab [unofficial]
			case 0x0f: // ASO abcd [unofficial]
			case 0x13: // ASO (ab),y [unofficial]
			case 0x17: // ASO ab,x [unofficial]
			case 0x1b: // ASO abcd,y [unofficial]
			case 0x1f: // ASO abcd,x [unofficial]
				Nz = A |= ArithmeticShiftLeft(addr);
				break;
			case 0x06: // ASL ab
			case 0x0e: // ASL abcd
			case 0x16: // ASL ab,x
			case 0x1e: // ASL abcd,x
				Nz = ArithmeticShiftLeft(addr);
				break;
			case 0x10: // BPL
			case 0x30: // BMI
			case 0x50: // BVC
			case 0x70: // BVS
			case 0x90: // BCC
			case 0xb0: // BCS
			case 0xd0: // BNE
			case 0xf0: // BEQ
				addr = (Memory[Pc] ^ 0x80) - 0x80;
				Pc++;
				addr += Pc;
				Cycle += (addr ^ Pc) >> 8 != 0 ? 2 : 1;
				Pc = addr;
				break;
			case 0x21: // AND (ab,x)
			case 0x25: // AND ab
			case 0x29: // AND #ab
			case 0x2d: // AND abcd
			case 0x31: // AND (ab),y
			case 0x35: // AND ab,x
			case 0x39: // AND abcd,y
			case 0x3d: // AND abcd,x
				Nz = A &= Peek(addr);
				break;
			case 0x23: // RLA (ab,x) [unofficial]
			case 0x27: // RLA ab [unofficial]
			case 0x2f: // RLA abcd [unofficial]
			case 0x33: // RLA (ab),y [unofficial]
			case 0x37: // RLA ab,x [unofficial]
			case 0x3b: // RLA abcd,y [unofficial]
			case 0x3f: // RLA abcd,x [unofficial]
				Nz = A &= RotateLeft(addr);
				break;
			case 0x24: // BIT ab
			case 0x2c: // BIT abcd
				Nz = Peek(addr);
				Vdi = (Vdi & (DFlag | IFlag)) + (Nz & VFlag);
				Nz = ((Nz & 0x80) << 1) + (Nz & A);
				break;
			case 0x26: // ROL ab
			case 0x2e: // ROL abcd
			case 0x36: // ROL ab,x
			case 0x3e: // ROL abcd,x
				Nz = RotateLeft(addr);
				break;
			case 0x41: // EOR (ab,x)
			case 0x45: // EOR ab
			case 0x49: // EOR #ab
			case 0x4d: // EOR abcd
			case 0x51: // EOR (ab),y
			case 0x55: // EOR ab,x
			case 0x59: // EOR abcd,y
			case 0x5d: // EOR abcd,x
				Nz = A ^= Peek(addr);
				break;
			case 0x43: // LSE (ab,x) [unofficial]
			case 0x47: // LSE ab [unofficial]
			case 0x4f: // LSE abcd [unofficial]
			case 0x53: // LSE (ab),y [unofficial]
			case 0x57: // LSE ab,x [unofficial]
			case 0x5b: // LSE abcd,y [unofficial]
			case 0x5f: // LSE abcd,x [unofficial]
				Nz = A ^= LogicalShiftRight(addr);
				break;
			case 0x46: // LSR ab
			case 0x4e: // LSR abcd
			case 0x56: // LSR ab,x
			case 0x5e: // LSR abcd,x
				Nz = LogicalShiftRight(addr);
				break;
			case 0x61: // ADC (ab,x)
			case 0x65: // ADC ab
			case 0x69: // ADC #ab
			case 0x6d: // ADC abcd
			case 0x71: // ADC (ab),y
			case 0x75: // ADC ab,x
			case 0x79: // ADC abcd,y
			case 0x7d: // ADC abcd,x
				AddWithCarry(Peek(addr));
				break;
			case 0x63: // RRA (ab,x) [unofficial]
			case 0x67: // RRA ab [unofficial]
			case 0x6f: // RRA abcd [unofficial]
			case 0x73: // RRA (ab),y [unofficial]
			case 0x77: // RRA ab,x [unofficial]
			case 0x7b: // RRA abcd,y [unofficial]
			case 0x7f: // RRA abcd,x [unofficial]
				AddWithCarry(RotateRight(addr));
				break;
			case 0x66: // ROR ab
			case 0x6e: // ROR abcd
			case 0x76: // ROR ab,x
			case 0x7e: // ROR abcd,x
				Nz = RotateRight(addr);
				break;
			case 0x6c: // JMP (abcd)
				Pc = Memory[addr];
				if ((++addr & 0xff) == 0)
					addr -= 0xff;
				Pc += Memory[addr] << 8;
				break;
			case 0x81: // STA (ab,x)
			case 0x85: // STA ab
			case 0x8d: // STA abcd
			case 0x91: // STA (ab),y
			case 0x95: // STA ab,x
			case 0x99: // STA abcd,y
			case 0x9d: // STA abcd,x
				Poke(addr, A);
				break;
			case 0x83: // SAX (ab,x) [unofficial]
			case 0x87: // SAX ab [unofficial]
			case 0x8f: // SAX abcd [unofficial]
			case 0x97: // SAX ab,y [unofficial]
				Poke(addr, A & X);
				break;
			case 0x84: // STY ab
			case 0x8c: // STY abcd
			case 0x94: // STY ab,x
				Poke(addr, Y);
				break;
			case 0x86: // STX ab
			case 0x8e: // STX abcd
			case 0x96: // STX ab,y
				Poke(addr, X);
				break;
			case 0xa0: // LDY #ab
			case 0xa4: // LDY ab
			case 0xac: // LDY abcd
			case 0xb4: // LDY ab,x
			case 0xbc: // LDY abcd,x
				Nz = Y = Peek(addr);
				break;
			case 0xa1: // LDA (ab,x)
			case 0xa5: // LDA ab
			case 0xa9: // LDA #ab
			case 0xad: // LDA abcd
			case 0xb1: // LDA (ab),y
			case 0xb5: // LDA ab,x
			case 0xb9: // LDA abcd,y
			case 0xbd: // LDA abcd,x
				Nz = A = Peek(addr);
				break;
			case 0xa2: // LDX #ab
			case 0xa6: // LDX ab
			case 0xae: // LDX abcd
			case 0xb6: // LDX ab,y
			case 0xbe: // LDX abcd,y
				Nz = X = Peek(addr);
				break;
			case 0xa3: // LAX (ab,x) [unofficial]
			case 0xa7: // LAX ab [unofficial]
			case 0xaf: // LAX abcd [unofficial]
			case 0xb3: // LAX (ab),y [unofficial]
			case 0xb7: // LAX ab,y [unofficial]
			case 0xbf: // LAX abcd,y [unofficial]
				Nz = X = A = Peek(addr);
				break;
			case 0xbb: // LAS abcd,y [unofficial, unstable]
				// only Z is unstable
				Nz = X = A = S &= Peek(addr);
				break;
			case 0xc0: // CPY #ab
			case 0xc4: // CPY ab
			case 0xcc: // CPY abcd
				Nz = Peek(addr);
				C = Y >= Nz ? 1 : 0;
				Nz = (Y - Nz) & 0xff;
				break;
			case 0xc1: // CMP (ab,x)
			case 0xc5: // CMP ab
			case 0xc9: // CMP #ab
			case 0xcd: // CMP abcd
			case 0xd1: // CMP (ab),y
			case 0xd5: // CMP ab,x
			case 0xd9: // CMP abcd,y
			case 0xdd: // CMP abcd,x
				Nz = Peek(addr);
				C = A >= Nz ? 1 : 0;
				Nz = (A - Nz) & 0xff;
				break;
			case 0xc3: // DCM (ab,x) [unofficial]
			case 0xc7: // DCM ab [unofficial]
			case 0xcf: // DCM abcd [unofficial]
			case 0xd3: // DCM (ab),y [unofficial]
			case 0xd7: // DCM ab,x [unofficial]
			case 0xdb: // DCM abcd,y [unofficial]
			case 0xdf: // DCM abcd,x [unofficial]
				data = Decrement(addr);
				C = A >= data ? 1 : 0;
				Nz = (A - data) & 0xff;
				break;
			case 0xc6: // DEC ab
			case 0xce: // DEC abcd
			case 0xd6: // DEC ab,x
			case 0xde: // DEC abcd,x
				Nz = Decrement(addr);
				break;
			case 0xe0: // CPX #ab
			case 0xe4: // CPX ab
			case 0xec: // CPX abcd
				Nz = Peek(addr);
				C = X >= Nz ? 1 : 0;
				Nz = (X - Nz) & 0xff;
				break;
			case 0xe1: // SBC (ab,x)
			case 0xe5: // SBC ab
			case 0xe9: // SBC #ab
			case 0xeb: // SBC #ab [unofficial]
			case 0xed: // SBC abcd
			case 0xf1: // SBC (ab),y
			case 0xf5: // SBC ab,x
			case 0xf9: // SBC abcd,y
			case 0xfd: // SBC abcd,x
				SubtractWithCarry(Peek(addr));
				break;
			case 0xe3: // INS (ab,x) [unofficial]
			case 0xe7: // INS ab [unofficial]
			case 0xef: // INS abcd [unofficial]
			case 0xf3: // INS (ab),y [unofficial]
			case 0xf7: // INS ab,x [unofficial]
			case 0xfb: // INS abcd,y [unofficial]
			case 0xff: // INS abcd,x [unofficial]
				SubtractWithCarry(Increment(addr));
				break;
			case 0xe6: // INC ab
			case 0xee: // INC abcd
			case 0xf6: // INC ab,x
			case 0xfe: // INC abcd,x
				Nz = Increment(addr);
				break;
			default:
				assert false;
			}
		}
	}
}
